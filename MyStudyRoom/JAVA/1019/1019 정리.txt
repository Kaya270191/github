Ch2. 자바 기본 프로그래밍 

2-1. 자바 프로그램의 구조

클래스와 클래스 안의 변수, 상수, 함수(메소드) 등을 작성 
주석문 // 한라인  /* 블라블라주석 */ 여러라인 
main()메소드: 한 클래스에 하나의 main만 작성
메소드: 클래스 안의 멤버 함수 
변수선언: 지역변수(:메소드 내에서만 사용되고 메소드 실행이 끝나면 소멸)
문장은 ;로 끝남
화면출력: System.out.println( ) 출력 후 다음 행으로 이동 
System.out.print( ) 출력 후 다음 행으로 이동 안 함

2-2. 식별자 identifier 
클래스, 변수, 상수, 메소드 등에 붙이는 이름 

_, $, 한글  사용O 
특수문자, 공백 사용 X
if, while, class  사용 X
첫 번째 문자로 숫자 사용  X
true, false, null 사용  X
대소문자 구별
길이 제한  X


클래스 이름: 첫 번째 문자는 대문자로 시작 
public class HelloWorld{ }

변수, 메소드 이름: 첫 단어는 소문자, 각 단어 첫분 째 문자는 대문자 
int myAge;
boolean isSingle;
public int getAge( )

상수 이름: 이름 전체를 대문자로 표기 
final double PI = 3.1415;

2-3 자바의 데이터 타입
: 자바에서 다룰 수 있는 데이터의 종류 

기본타입(8개)
:boolean, char, byte, short, int, long, float, double

레퍼런스 타입(1개)
:용도에 따라 3가지로 분류 
배열(배열에 대한 주소 값)/ 클래스(객체에 대한 주소 값)/ 인터페이스에 대한 레퍼런스 


자바의 기본타입
문자 타입 : char ( 유니코드, 2바이트)
정수를 저장하는 타입 : byte(1바이트), short(2바이트), int(4바이트), long(8바이트) 
실수를 저장하는 타입 : float(4바이트), double(8바이트)

문자열은 String 클래스를 이용 
String a = "Happy Java";
String b = "a";
String c = "123";

변수와 선언 
변수: 데이터를 저장하는 공간 

리터럴(literal): 프로그램에 직접 표현한 값

정수 리터럴
10진수: 0으로 시작하지 않는 수 
8진수: 0으로 시작
16진수: 0x로 시작
2진수: 0b로 시작
실수 리터럴
1234E-4  =  0.1234
1234E+4  = 12340000
문자 리터럴
논리 리터럴(true, false)과 boolean 타입 



2-4 자바에서 키 입력 

System.in : 키보드로 입력한 대로 키 입력 받음 

Scanner이용 : 키보드로 입력된 키를 문자, 정수, 실수 , 문자열 등 사용자가 원하는 타입으로 변환해주는 클래스 
import java.util.Scanner;
공백을 기준으로 읽음 


2-5 연산 
연산: 주어진 식을 계산하여 결과를 얻어내는 과정 

식과 연산
연산의 종류
증감 ++ --
산술 + -  *  /  % 
시프트 >>  <<  >>>
비교 > < >= <= ++ !=
비트 & | ^ ~
논리 && || ! ^
조건 ? :
대입 = *= /= += -= &= ^= |= <<= >>= >>>=


연산자 우선순위: 우선순위가 높은 것부터 처리 

산술 연산: + -  *  /(몫)  %(나머지) 

증감 연산: ++(1증가)  --(1감소)
int a=1;
a++; a 값 1증가 ,a는 2
++a; 다시 a 값 1증가, a는 3

대입 연산: 연산자 오른쪽 식의 결과를 왼쪽에 있는 변수에 대입 

비교 연산: 두 개의 피연산자를 비교하여 true 또는 false의 논리 값을 내는 연산자. AND, OR, XOR, NOT의 논리 사용
a == b : a와 b가 같으면 true
a != b : a와 b가 같지 않으면 true
!a : a가 true면 false, false 이면 true
a||b : a,b 모두 false 인 경우에만 false
a&&b : a,b 모두 true 인 경우에만 true
a^b : a,b 서로 다를 때 true 

논리 연산 


조건 연산: 3개의 피연산자로 구성. 
condition ? opr2 : opr3
condition 이 true 이면 결과 값은 opr2의 값이 되고, false 이면 opr3의 값이 된다. 

비트 연산:
비트 논리 연산: 비트끼리 AND, OR, XOR, NOT 연산
a&b :  두 비트 모두 1이면 1, 그렇지 않으면 0
a | b : 두 비트 모두 0이면 0, 그렇지 않으면 1
a ^ b : 두 비트가 다르면 1, 같으면 0
~ a : 1을 0으로 0을 1로 변환 



비트 시프트 연산: 비트를 오른쪽이나 왼쪽으로 이동
a >> b : a 의 각 비트를 오른쪽으로 b번 이동
a >>> b: a 의 각 비트를 오른쪽을 b번 이동. 최상위 비트의 빈자리는 항상 0으로 채움
a << b: a의 각 비트를 왼쪽으로 b번 이동. 최하우 비트의 빈자리는 항상 0으로 채움











